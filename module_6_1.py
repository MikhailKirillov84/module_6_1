#Цель: применить базовые знания о наследовании классов для решения задачи
#
# Задача "Съедобное, несъедобное":
# Разнообразие животного мира давно будоражит умы человечества. Царства, классы, виды... Почему бы и нам не попробовать выстроить что-то подобное используя наследования классов?
#
# Необходимо описать пример иерархии животного мира, используя классы и принцип наследования.
#
# Создайте:
# 2 класса родителя: Animal, Plant
# Для класса Animal атрибуты alive = True(живой) и fed = False(накормленный), name - индивидуальное название каждого животного.
# Для класса Plant атрибут edible = False(съедобность), name - индивидуальное название каждого растения
#
# 4 класса наследника:
# Mammal, Predator для Animal.
# Flower, Fruit для Plant.
#
# У каждого из объектов класса Mammal и Predator должны быть атрибуты и методы:
# eat(self, food) - метод, где food - это параметр, принимающий объекты классов растений.
#
# Метод eat должен работать следующим образом:
# Если переданное растение (food) съедобное - выводит на экран "<self.name> съел <food.name>", меняется атрибут fed на True.
# Если переданное растение (food) не съедобное - выводит на экран "<self.name> не стал есть <food.name>", меняется атрибут alive на False.
# Т.е если животному дать съедобное растение, то животное насытится, если не съедобное - погибнет.
#
# У каждого объекта Fruit должен быть атрибут edible = True (переопределить при наследовании)
#
# Создайте объекты классов и проделайте действия затронутые в примере результата работы программы.
#
# Пункты задачи:
# Создайте классы Animal и Plant с соответствующими атрибутами и методами
# Создайте(+унаследуйте) классы Mammal, Predator, Flower, Fruit с соответствующими атрибутами и методами. При необходимости переопределите значения атрибутов.
# Создайте объекты этих классов.


# создание класса Animal
class Animal:
    # создадим атрибуты класса
    alive = True
    fed = False

    # создание метода "__init__"(конструктор), который принимает один атрибут
    def __init__(self, name):
        # атрибут "name" - индивидуальное название каждого животного
        self.name = name

    # создание метода "eat" который принимает один атрибут "food"
    def eat(self, food):
        # атрибут "food" - параметр, принимающий объекты классов растений
        self.food = food
        # условие в котором параметр("food") принимает объект("edible") класса "Plant"
        if food.edible:
            # выводим строку что, объект(self.name) класса "Animal" съедает предлагаемый параметр(food.name), если он съедобный(True)
            print(f'{self.name} съел {food.name}')
            # меняем атрибут "fed" (класса Animal) на "True"
            self.fed = True

        # условие если объект("edible") класса "Plant" равен "False"
        else:
            # выводим строку что, объект(self.name) класса "Animal" не ест предлагаемый параметр(food.name), он несъедобный(False)
            print(f'{self.name} не стал есть {food.name}')
            # меняется атрибут "alive" (класса Animal) на "False"
            self.alive = False

# создание класса "Plant"
class Plant:
    # создание атрибута класса
    edible = False

    # создание метода "__init__"(конструктор), который принимает один атрибут
    def __init__(self, name):
        # атрибут "name" - индивидуальное название каждого растения
        self.name = name

# создание класса "Mammal", который наследует методы и атрибуты родительского класса "Animal"
class Mammal(Animal):
    # не имеет(pass) своих атрибутов и методов
    pass

# создание класса "Predator", который наследует методы и атрибуты родительского класса "Animal"
class Predator(Animal):
    # не имеет(pass) своих атрибутов и методов
    pass

# создание класса "Flower", который наследует методы и атрибуты родительского класса "Plant"
class Flower(Plant):
    # не имеет(pass) своих атрибутов и методов
    pass

# создание класса "Fruit", который наследует методы и атрибуты родительского класса "Plant"
class Fruit(Plant):
    # создание атрибута класса
    edible = True

# Выполняемый код:

# создадим объекты классов:
a1 = Predator('Волк с Уолл-Стрит')
a2 = Mammal('Хатико')
p1 = Flower('Цветик семицветик')
p2 = Fruit('Заводной апельсин')

print(a1.name)
print(p1.name)

print(a1.alive)
print(a2.fed)

a1.eat(p1)   # вызов метода "eat" для объектов (а1, а2)
a2.eat(p2)
print(a1.alive)
print(a2.fed)


# Что произошло: Хищник попытался съесть цветок и погиб, млекопитающее съело фрукт и насытилось.